#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <ArduinoJson.h>
#include <ArduinoOTA.h>
#include <ESP8266HTTPClient.h>
#include <ESP8266WiFi.h>
#include <TinyGPS++.h>
#include <WiFiClientSecure.h>
#include <Wire.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define UP_switch D5
#define DOWN_switch D7
#define UPLOAD_INTREVAL 40000

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);
TinyGPSPlus gps;
StaticJsonDocument<196> doc;

const char* ssid = "fiber";
const char* password = "56948446";
const char* serverName = "https://548ebd.deta.dev/location/new";  // post
float latitude, longitude;
String output;

String latarray[20];
String lngarray[20];
unsigned int i = 0;
const unsigned long Interval = 13000;
unsigned long previousTime = 0;
unsigned int directionbus = 0;
char *stops[] = {"N/A", "MNJRY", "POLY", "SHED", "NLMBR" , "MLPM", "KOTKL", "PALKD"};
void displayPrint(String text, unsigned int line = 1) {
  display.setCursor(0, line * 10);
  display.println(text);
  display.display();
}

void bottomBar(String text) {
  display.setCursor(2, 54);
  display.fillRect(0, 52, 128, 12, WHITE);
  display.setTextColor(BLACK, WHITE);
  display.println(text);
  display.display();
  display.setTextColor(WHITE, BLACK);
}

String last_text = "";
void displayDesctription(String text) {
  if (text != last_text) {
    display.setCursor(0, 34);
    display.setTextSize(1);
    display.fillRect(0, 34, 128, 10, BLACK);
    display.println(text);
    display.display();
    last_text = text;
  }
}

void displayDirection() {
  display.setCursor(0, 0);
  display.setTextSize(4);
  display.fillRect(0, 0, 128, 30, BLACK);
  display.println(stops[directionbus]);
  display.display();
  display.setTextSize(1);
}

void setup() {
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    for (;;);
  }
  delay(2000);
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  Serial.begin(115200);
  delay(2000);
  WiFi.begin(ssid, password);
  display.clearDisplay();
  while (WiFi.status() != WL_CONNECTED) {
    bottomBar("Connecting to WIFI...");
    displayPrint("PROJECT BY", 1);
    displayPrint("1. AMJAD  4. ANAS KC", 2);
    displayPrint("2. ANSAB  5. ANAS K", 3);
    displayPrint("3. NASIF | EL-19-22", 4);
  }
  display.clearDisplay();
  bottomBar("WiFi Connected!");
  pinMode(UP_switch, INPUT_PULLUP);
  pinMode(DOWN_switch, INPUT_PULLUP);
  Serial.begin(9600);
  delay(2000);  // Pause for 2 seconds
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
  }
  ArduinoOTA.setHostname("GPS-BUS-TRACKER");
  ArduinoOTA.begin();
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    for (;;)
      ;
  }
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
}

unsigned long previousTime2 = 0;
unsigned long debounceDelay = 0;

void loop() {
  ArduinoOTA.handle();

  if (WiFi.status() != WL_CONNECTED)
  {
    bottomBar("Waiting for WIFI...");
    return;
  } else {
    bottomBar("WiFi Connected!");
  }
  displayDirection();

  if ((millis() - debounceDelay) > 400) {
    if (digitalRead(UP_switch) == LOW && directionbus < 7)  directionbus++;
    if (digitalRead(DOWN_switch) == LOW && directionbus > 0)  directionbus--;
    debounceDelay = millis();
  }


  unsigned long currentTime = millis();
  if (Serial.available() > 0)
    if (gps.encode(Serial.read()))
    {
      if (currentTime - previousTime >= Interval) {
        if (gps.location.isValid())
        {
          latitude = gps.location.lat();
          longitude = gps.location.lng();
        }
        previousTime = currentTime;
      }
    }

  if (currentTime - previousTime2 >= UPLOAD_INTREVAL) {
    if ((latitude != 0) && (longitude != 0)) {
      displayDesctription("Uploading GPS Cordinates..");
      postdata(latitude, longitude);
    }
    //    postdata(latitude, longitude);
    previousTime2 = currentTime;
  }
  else {
    displayDesctription("Data update in: " + String( (UPLOAD_INTREVAL - (currentTime - previousTime2)) / 1000) + "s");
  }
}

void postdata(float lat1, float lng1) {
  if (WiFi.status() != WL_CONNECTED) return;
  WiFiClientSecure client;
  HTTPClient http;
  client.setInsecure();
  http.begin(client, "https://548ebd.deta.dev/location/new");
  http.addHeader("Content-Type", "application/json");
  doc["lat"] = lat1;
  doc["lng"] = lng1;
  doc["direction"] = stops[directionbus];
  serializeJson(doc, output);
  int httpResponseCode = http.POST(output);
  doc.clear();
  output = "";
  http.end();
}
